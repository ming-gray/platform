package com.platformmake.model.entity;

import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

public class PlaninfoExample {
    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table planinfo
     *
     * @mbg.generated Thu Jul 23 10:17:05 CST 2020
     */
    protected String orderByClause;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table planinfo
     *
     * @mbg.generated Thu Jul 23 10:17:05 CST 2020
     */
    protected boolean distinct;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table planinfo
     *
     * @mbg.generated Thu Jul 23 10:17:05 CST 2020
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table planinfo
     *
     * @mbg.generated Thu Jul 23 10:17:05 CST 2020
     */
    public PlaninfoExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table planinfo
     *
     * @mbg.generated Thu Jul 23 10:17:05 CST 2020
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table planinfo
     *
     * @mbg.generated Thu Jul 23 10:17:05 CST 2020
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table planinfo
     *
     * @mbg.generated Thu Jul 23 10:17:05 CST 2020
     */
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table planinfo
     *
     * @mbg.generated Thu Jul 23 10:17:05 CST 2020
     */
    public boolean isDistinct() {
        return distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table planinfo
     *
     * @mbg.generated Thu Jul 23 10:17:05 CST 2020
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table planinfo
     *
     * @mbg.generated Thu Jul 23 10:17:05 CST 2020
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table planinfo
     *
     * @mbg.generated Thu Jul 23 10:17:05 CST 2020
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table planinfo
     *
     * @mbg.generated Thu Jul 23 10:17:05 CST 2020
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table planinfo
     *
     * @mbg.generated Thu Jul 23 10:17:05 CST 2020
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table planinfo
     *
     * @mbg.generated Thu Jul 23 10:17:05 CST 2020
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table planinfo
     *
     * @mbg.generated Thu Jul 23 10:17:05 CST 2020
     */
    protected abstract static class GeneratedCriteria {
        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<Criterion>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getAllCriteria() {
            return criteria;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

        protected void addCriterionForJDBCDate(String condition, Date value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            addCriterion(condition, new java.sql.Date(value.getTime()), property);
        }

        protected void addCriterionForJDBCDate(String condition, List<Date> values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            List<java.sql.Date> dateList = new ArrayList<java.sql.Date>();
            Iterator<Date> iter = values.iterator();
            while (iter.hasNext()) {
                dateList.add(new java.sql.Date(iter.next().getTime()));
            }
            addCriterion(condition, dateList, property);
        }

        protected void addCriterionForJDBCDate(String condition, Date value1, Date value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            addCriterion(condition, new java.sql.Date(value1.getTime()), new java.sql.Date(value2.getTime()), property);
        }

        public Criteria andPlanidIsNull() {
            addCriterion("planid is null");
            return (Criteria) this;
        }

        public Criteria andPlanidIsNotNull() {
            addCriterion("planid is not null");
            return (Criteria) this;
        }

        public Criteria andPlanidEqualTo(Integer value) {
            addCriterion("planid =", value, "planid");
            return (Criteria) this;
        }

        public Criteria andPlanidNotEqualTo(Integer value) {
            addCriterion("planid <>", value, "planid");
            return (Criteria) this;
        }

        public Criteria andPlanidGreaterThan(Integer value) {
            addCriterion("planid >", value, "planid");
            return (Criteria) this;
        }

        public Criteria andPlanidGreaterThanOrEqualTo(Integer value) {
            addCriterion("planid >=", value, "planid");
            return (Criteria) this;
        }

        public Criteria andPlanidLessThan(Integer value) {
            addCriterion("planid <", value, "planid");
            return (Criteria) this;
        }

        public Criteria andPlanidLessThanOrEqualTo(Integer value) {
            addCriterion("planid <=", value, "planid");
            return (Criteria) this;
        }

        public Criteria andPlanidIn(List<Integer> values) {
            addCriterion("planid in", values, "planid");
            return (Criteria) this;
        }

        public Criteria andPlanidNotIn(List<Integer> values) {
            addCriterion("planid not in", values, "planid");
            return (Criteria) this;
        }

        public Criteria andPlanidBetween(Integer value1, Integer value2) {
            addCriterion("planid between", value1, value2, "planid");
            return (Criteria) this;
        }

        public Criteria andPlanidNotBetween(Integer value1, Integer value2) {
            addCriterion("planid not between", value1, value2, "planid");
            return (Criteria) this;
        }

        public Criteria andOrdidIsNull() {
            addCriterion("ordid is null");
            return (Criteria) this;
        }

        public Criteria andOrdidIsNotNull() {
            addCriterion("ordid is not null");
            return (Criteria) this;
        }

        public Criteria andOrdidEqualTo(Integer value) {
            addCriterion("ordid =", value, "ordid");
            return (Criteria) this;
        }

        public Criteria andOrdidNotEqualTo(Integer value) {
            addCriterion("ordid <>", value, "ordid");
            return (Criteria) this;
        }

        public Criteria andOrdidGreaterThan(Integer value) {
            addCriterion("ordid >", value, "ordid");
            return (Criteria) this;
        }

        public Criteria andOrdidGreaterThanOrEqualTo(Integer value) {
            addCriterion("ordid >=", value, "ordid");
            return (Criteria) this;
        }

        public Criteria andOrdidLessThan(Integer value) {
            addCriterion("ordid <", value, "ordid");
            return (Criteria) this;
        }

        public Criteria andOrdidLessThanOrEqualTo(Integer value) {
            addCriterion("ordid <=", value, "ordid");
            return (Criteria) this;
        }

        public Criteria andOrdidIn(List<Integer> values) {
            addCriterion("ordid in", values, "ordid");
            return (Criteria) this;
        }

        public Criteria andOrdidNotIn(List<Integer> values) {
            addCriterion("ordid not in", values, "ordid");
            return (Criteria) this;
        }

        public Criteria andOrdidBetween(Integer value1, Integer value2) {
            addCriterion("ordid between", value1, value2, "ordid");
            return (Criteria) this;
        }

        public Criteria andOrdidNotBetween(Integer value1, Integer value2) {
            addCriterion("ordid not between", value1, value2, "ordid");
            return (Criteria) this;
        }

        public Criteria andProidIsNull() {
            addCriterion("proid is null");
            return (Criteria) this;
        }

        public Criteria andProidIsNotNull() {
            addCriterion("proid is not null");
            return (Criteria) this;
        }

        public Criteria andProidEqualTo(Integer value) {
            addCriterion("proid =", value, "proid");
            return (Criteria) this;
        }

        public Criteria andProidNotEqualTo(Integer value) {
            addCriterion("proid <>", value, "proid");
            return (Criteria) this;
        }

        public Criteria andProidGreaterThan(Integer value) {
            addCriterion("proid >", value, "proid");
            return (Criteria) this;
        }

        public Criteria andProidGreaterThanOrEqualTo(Integer value) {
            addCriterion("proid >=", value, "proid");
            return (Criteria) this;
        }

        public Criteria andProidLessThan(Integer value) {
            addCriterion("proid <", value, "proid");
            return (Criteria) this;
        }

        public Criteria andProidLessThanOrEqualTo(Integer value) {
            addCriterion("proid <=", value, "proid");
            return (Criteria) this;
        }

        public Criteria andProidIn(List<Integer> values) {
            addCriterion("proid in", values, "proid");
            return (Criteria) this;
        }

        public Criteria andProidNotIn(List<Integer> values) {
            addCriterion("proid not in", values, "proid");
            return (Criteria) this;
        }

        public Criteria andProidBetween(Integer value1, Integer value2) {
            addCriterion("proid between", value1, value2, "proid");
            return (Criteria) this;
        }

        public Criteria andProidNotBetween(Integer value1, Integer value2) {
            addCriterion("proid not between", value1, value2, "proid");
            return (Criteria) this;
        }

        public Criteria andPlancountIsNull() {
            addCriterion("plancount is null");
            return (Criteria) this;
        }

        public Criteria andPlancountIsNotNull() {
            addCriterion("plancount is not null");
            return (Criteria) this;
        }

        public Criteria andPlancountEqualTo(Integer value) {
            addCriterion("plancount =", value, "plancount");
            return (Criteria) this;
        }

        public Criteria andPlancountNotEqualTo(Integer value) {
            addCriterion("plancount <>", value, "plancount");
            return (Criteria) this;
        }

        public Criteria andPlancountGreaterThan(Integer value) {
            addCriterion("plancount >", value, "plancount");
            return (Criteria) this;
        }

        public Criteria andPlancountGreaterThanOrEqualTo(Integer value) {
            addCriterion("plancount >=", value, "plancount");
            return (Criteria) this;
        }

        public Criteria andPlancountLessThan(Integer value) {
            addCriterion("plancount <", value, "plancount");
            return (Criteria) this;
        }

        public Criteria andPlancountLessThanOrEqualTo(Integer value) {
            addCriterion("plancount <=", value, "plancount");
            return (Criteria) this;
        }

        public Criteria andPlancountIn(List<Integer> values) {
            addCriterion("plancount in", values, "plancount");
            return (Criteria) this;
        }

        public Criteria andPlancountNotIn(List<Integer> values) {
            addCriterion("plancount not in", values, "plancount");
            return (Criteria) this;
        }

        public Criteria andPlancountBetween(Integer value1, Integer value2) {
            addCriterion("plancount between", value1, value2, "plancount");
            return (Criteria) this;
        }

        public Criteria andPlancountNotBetween(Integer value1, Integer value2) {
            addCriterion("plancount not between", value1, value2, "plancount");
            return (Criteria) this;
        }

        public Criteria andDdlIsNull() {
            addCriterion("ddl is null");
            return (Criteria) this;
        }

        public Criteria andDdlIsNotNull() {
            addCriterion("ddl is not null");
            return (Criteria) this;
        }

        public Criteria andDdlEqualTo(Date value) {
            addCriterionForJDBCDate("ddl =", value, "ddl");
            return (Criteria) this;
        }

        public Criteria andDdlNotEqualTo(Date value) {
            addCriterionForJDBCDate("ddl <>", value, "ddl");
            return (Criteria) this;
        }

        public Criteria andDdlGreaterThan(Date value) {
            addCriterionForJDBCDate("ddl >", value, "ddl");
            return (Criteria) this;
        }

        public Criteria andDdlGreaterThanOrEqualTo(Date value) {
            addCriterionForJDBCDate("ddl >=", value, "ddl");
            return (Criteria) this;
        }

        public Criteria andDdlLessThan(Date value) {
            addCriterionForJDBCDate("ddl <", value, "ddl");
            return (Criteria) this;
        }

        public Criteria andDdlLessThanOrEqualTo(Date value) {
            addCriterionForJDBCDate("ddl <=", value, "ddl");
            return (Criteria) this;
        }

        public Criteria andDdlIn(List<Date> values) {
            addCriterionForJDBCDate("ddl in", values, "ddl");
            return (Criteria) this;
        }

        public Criteria andDdlNotIn(List<Date> values) {
            addCriterionForJDBCDate("ddl not in", values, "ddl");
            return (Criteria) this;
        }

        public Criteria andDdlBetween(Date value1, Date value2) {
            addCriterionForJDBCDate("ddl between", value1, value2, "ddl");
            return (Criteria) this;
        }

        public Criteria andDdlNotBetween(Date value1, Date value2) {
            addCriterionForJDBCDate("ddl not between", value1, value2, "ddl");
            return (Criteria) this;
        }

        public Criteria andPlansttimeIsNull() {
            addCriterion("plansttime is null");
            return (Criteria) this;
        }

        public Criteria andPlansttimeIsNotNull() {
            addCriterion("plansttime is not null");
            return (Criteria) this;
        }

        public Criteria andPlansttimeEqualTo(Date value) {
            addCriterionForJDBCDate("plansttime =", value, "plansttime");
            return (Criteria) this;
        }

        public Criteria andPlansttimeNotEqualTo(Date value) {
            addCriterionForJDBCDate("plansttime <>", value, "plansttime");
            return (Criteria) this;
        }

        public Criteria andPlansttimeGreaterThan(Date value) {
            addCriterionForJDBCDate("plansttime >", value, "plansttime");
            return (Criteria) this;
        }

        public Criteria andPlansttimeGreaterThanOrEqualTo(Date value) {
            addCriterionForJDBCDate("plansttime >=", value, "plansttime");
            return (Criteria) this;
        }

        public Criteria andPlansttimeLessThan(Date value) {
            addCriterionForJDBCDate("plansttime <", value, "plansttime");
            return (Criteria) this;
        }

        public Criteria andPlansttimeLessThanOrEqualTo(Date value) {
            addCriterionForJDBCDate("plansttime <=", value, "plansttime");
            return (Criteria) this;
        }

        public Criteria andPlansttimeIn(List<Date> values) {
            addCriterionForJDBCDate("plansttime in", values, "plansttime");
            return (Criteria) this;
        }

        public Criteria andPlansttimeNotIn(List<Date> values) {
            addCriterionForJDBCDate("plansttime not in", values, "plansttime");
            return (Criteria) this;
        }

        public Criteria andPlansttimeBetween(Date value1, Date value2) {
            addCriterionForJDBCDate("plansttime between", value1, value2, "plansttime");
            return (Criteria) this;
        }

        public Criteria andPlansttimeNotBetween(Date value1, Date value2) {
            addCriterionForJDBCDate("plansttime not between", value1, value2, "plansttime");
            return (Criteria) this;
        }

        public Criteria andPlanentimeIsNull() {
            addCriterion("planentime is null");
            return (Criteria) this;
        }

        public Criteria andPlanentimeIsNotNull() {
            addCriterion("planentime is not null");
            return (Criteria) this;
        }

        public Criteria andPlanentimeEqualTo(Date value) {
            addCriterionForJDBCDate("planentime =", value, "planentime");
            return (Criteria) this;
        }

        public Criteria andPlanentimeNotEqualTo(Date value) {
            addCriterionForJDBCDate("planentime <>", value, "planentime");
            return (Criteria) this;
        }

        public Criteria andPlanentimeGreaterThan(Date value) {
            addCriterionForJDBCDate("planentime >", value, "planentime");
            return (Criteria) this;
        }

        public Criteria andPlanentimeGreaterThanOrEqualTo(Date value) {
            addCriterionForJDBCDate("planentime >=", value, "planentime");
            return (Criteria) this;
        }

        public Criteria andPlanentimeLessThan(Date value) {
            addCriterionForJDBCDate("planentime <", value, "planentime");
            return (Criteria) this;
        }

        public Criteria andPlanentimeLessThanOrEqualTo(Date value) {
            addCriterionForJDBCDate("planentime <=", value, "planentime");
            return (Criteria) this;
        }

        public Criteria andPlanentimeIn(List<Date> values) {
            addCriterionForJDBCDate("planentime in", values, "planentime");
            return (Criteria) this;
        }

        public Criteria andPlanentimeNotIn(List<Date> values) {
            addCriterionForJDBCDate("planentime not in", values, "planentime");
            return (Criteria) this;
        }

        public Criteria andPlanentimeBetween(Date value1, Date value2) {
            addCriterionForJDBCDate("planentime between", value1, value2, "planentime");
            return (Criteria) this;
        }

        public Criteria andPlanentimeNotBetween(Date value1, Date value2) {
            addCriterionForJDBCDate("planentime not between", value1, value2, "planentime");
            return (Criteria) this;
        }

        public Criteria andPlanstateIsNull() {
            addCriterion("planstate is null");
            return (Criteria) this;
        }

        public Criteria andPlanstateIsNotNull() {
            addCriterion("planstate is not null");
            return (Criteria) this;
        }

        public Criteria andPlanstateEqualTo(Integer value) {
            addCriterion("planstate =", value, "planstate");
            return (Criteria) this;
        }

        public Criteria andPlanstateNotEqualTo(Integer value) {
            addCriterion("planstate <>", value, "planstate");
            return (Criteria) this;
        }

        public Criteria andPlanstateGreaterThan(Integer value) {
            addCriterion("planstate >", value, "planstate");
            return (Criteria) this;
        }

        public Criteria andPlanstateGreaterThanOrEqualTo(Integer value) {
            addCriterion("planstate >=", value, "planstate");
            return (Criteria) this;
        }

        public Criteria andPlanstateLessThan(Integer value) {
            addCriterion("planstate <", value, "planstate");
            return (Criteria) this;
        }

        public Criteria andPlanstateLessThanOrEqualTo(Integer value) {
            addCriterion("planstate <=", value, "planstate");
            return (Criteria) this;
        }

        public Criteria andPlanstateIn(List<Integer> values) {
            addCriterion("planstate in", values, "planstate");
            return (Criteria) this;
        }

        public Criteria andPlanstateNotIn(List<Integer> values) {
            addCriterion("planstate not in", values, "planstate");
            return (Criteria) this;
        }

        public Criteria andPlanstateBetween(Integer value1, Integer value2) {
            addCriterion("planstate between", value1, value2, "planstate");
            return (Criteria) this;
        }

        public Criteria andPlanstateNotBetween(Integer value1, Integer value2) {
            addCriterion("planstate not between", value1, value2, "planstate");
            return (Criteria) this;
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table planinfo
     *
     * @mbg.generated do_not_delete_during_merge Thu Jul 23 10:17:05 CST 2020
     */
    public static class Criteria extends GeneratedCriteria {

        protected Criteria() {
            super();
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table planinfo
     *
     * @mbg.generated Thu Jul 23 10:17:05 CST 2020
     */
    public static class Criterion {
        private String condition;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        private String typeHandler;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }
    }
}