package com.platformmake.model.entity;

import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

public class DayWorkExample {
    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table day_work
     *
     * @mbg.generated Sun Jul 26 23:40:19 CST 2020
     */
    protected String orderByClause;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table day_work
     *
     * @mbg.generated Sun Jul 26 23:40:19 CST 2020
     */
    protected boolean distinct;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table day_work
     *
     * @mbg.generated Sun Jul 26 23:40:19 CST 2020
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table day_work
     *
     * @mbg.generated Sun Jul 26 23:40:19 CST 2020
     */
    public DayWorkExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table day_work
     *
     * @mbg.generated Sun Jul 26 23:40:19 CST 2020
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table day_work
     *
     * @mbg.generated Sun Jul 26 23:40:19 CST 2020
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table day_work
     *
     * @mbg.generated Sun Jul 26 23:40:19 CST 2020
     */
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table day_work
     *
     * @mbg.generated Sun Jul 26 23:40:19 CST 2020
     */
    public boolean isDistinct() {
        return distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table day_work
     *
     * @mbg.generated Sun Jul 26 23:40:19 CST 2020
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table day_work
     *
     * @mbg.generated Sun Jul 26 23:40:19 CST 2020
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table day_work
     *
     * @mbg.generated Sun Jul 26 23:40:19 CST 2020
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table day_work
     *
     * @mbg.generated Sun Jul 26 23:40:19 CST 2020
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table day_work
     *
     * @mbg.generated Sun Jul 26 23:40:19 CST 2020
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table day_work
     *
     * @mbg.generated Sun Jul 26 23:40:19 CST 2020
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table day_work
     *
     * @mbg.generated Sun Jul 26 23:40:19 CST 2020
     */
    protected abstract static class GeneratedCriteria {
        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<Criterion>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getAllCriteria() {
            return criteria;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

        protected void addCriterionForJDBCDate(String condition, Date value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            addCriterion(condition, new java.sql.Date(value.getTime()), property);
        }

        protected void addCriterionForJDBCDate(String condition, List<Date> values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            List<java.sql.Date> dateList = new ArrayList<java.sql.Date>();
            Iterator<Date> iter = values.iterator();
            while (iter.hasNext()) {
                dateList.add(new java.sql.Date(iter.next().getTime()));
            }
            addCriterion(condition, dateList, property);
        }

        protected void addCriterionForJDBCDate(String condition, Date value1, Date value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            addCriterion(condition, new java.sql.Date(value1.getTime()), new java.sql.Date(value2.getTime()), property);
        }

        public Criteria andIdIsNull() {
            addCriterion("id is null");
            return (Criteria) this;
        }

        public Criteria andIdIsNotNull() {
            addCriterion("id is not null");
            return (Criteria) this;
        }

        public Criteria andIdEqualTo(Integer value) {
            addCriterion("id =", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotEqualTo(Integer value) {
            addCriterion("id <>", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdGreaterThan(Integer value) {
            addCriterion("id >", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdGreaterThanOrEqualTo(Integer value) {
            addCriterion("id >=", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdLessThan(Integer value) {
            addCriterion("id <", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdLessThanOrEqualTo(Integer value) {
            addCriterion("id <=", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdIn(List<Integer> values) {
            addCriterion("id in", values, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotIn(List<Integer> values) {
            addCriterion("id not in", values, "id");
            return (Criteria) this;
        }

        public Criteria andIdBetween(Integer value1, Integer value2) {
            addCriterion("id between", value1, value2, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotBetween(Integer value1, Integer value2) {
            addCriterion("id not between", value1, value2, "id");
            return (Criteria) this;
        }

        public Criteria andWorkidIsNull() {
            addCriterion("workid is null");
            return (Criteria) this;
        }

        public Criteria andWorkidIsNotNull() {
            addCriterion("workid is not null");
            return (Criteria) this;
        }

        public Criteria andWorkidEqualTo(Integer value) {
            addCriterion("workid =", value, "workid");
            return (Criteria) this;
        }

        public Criteria andWorkidNotEqualTo(Integer value) {
            addCriterion("workid <>", value, "workid");
            return (Criteria) this;
        }

        public Criteria andWorkidGreaterThan(Integer value) {
            addCriterion("workid >", value, "workid");
            return (Criteria) this;
        }

        public Criteria andWorkidGreaterThanOrEqualTo(Integer value) {
            addCriterion("workid >=", value, "workid");
            return (Criteria) this;
        }

        public Criteria andWorkidLessThan(Integer value) {
            addCriterion("workid <", value, "workid");
            return (Criteria) this;
        }

        public Criteria andWorkidLessThanOrEqualTo(Integer value) {
            addCriterion("workid <=", value, "workid");
            return (Criteria) this;
        }

        public Criteria andWorkidIn(List<Integer> values) {
            addCriterion("workid in", values, "workid");
            return (Criteria) this;
        }

        public Criteria andWorkidNotIn(List<Integer> values) {
            addCriterion("workid not in", values, "workid");
            return (Criteria) this;
        }

        public Criteria andWorkidBetween(Integer value1, Integer value2) {
            addCriterion("workid between", value1, value2, "workid");
            return (Criteria) this;
        }

        public Criteria andWorkidNotBetween(Integer value1, Integer value2) {
            addCriterion("workid not between", value1, value2, "workid");
            return (Criteria) this;
        }

        public Criteria andEqidIsNull() {
            addCriterion("eqid is null");
            return (Criteria) this;
        }

        public Criteria andEqidIsNotNull() {
            addCriterion("eqid is not null");
            return (Criteria) this;
        }

        public Criteria andEqidEqualTo(Integer value) {
            addCriterion("eqid =", value, "eqid");
            return (Criteria) this;
        }

        public Criteria andEqidNotEqualTo(Integer value) {
            addCriterion("eqid <>", value, "eqid");
            return (Criteria) this;
        }

        public Criteria andEqidGreaterThan(Integer value) {
            addCriterion("eqid >", value, "eqid");
            return (Criteria) this;
        }

        public Criteria andEqidGreaterThanOrEqualTo(Integer value) {
            addCriterion("eqid >=", value, "eqid");
            return (Criteria) this;
        }

        public Criteria andEqidLessThan(Integer value) {
            addCriterion("eqid <", value, "eqid");
            return (Criteria) this;
        }

        public Criteria andEqidLessThanOrEqualTo(Integer value) {
            addCriterion("eqid <=", value, "eqid");
            return (Criteria) this;
        }

        public Criteria andEqidIn(List<Integer> values) {
            addCriterion("eqid in", values, "eqid");
            return (Criteria) this;
        }

        public Criteria andEqidNotIn(List<Integer> values) {
            addCriterion("eqid not in", values, "eqid");
            return (Criteria) this;
        }

        public Criteria andEqidBetween(Integer value1, Integer value2) {
            addCriterion("eqid between", value1, value2, "eqid");
            return (Criteria) this;
        }

        public Criteria andEqidNotBetween(Integer value1, Integer value2) {
            addCriterion("eqid not between", value1, value2, "eqid");
            return (Criteria) this;
        }

        public Criteria andSttimeIsNull() {
            addCriterion("sttime is null");
            return (Criteria) this;
        }

        public Criteria andSttimeIsNotNull() {
            addCriterion("sttime is not null");
            return (Criteria) this;
        }

        public Criteria andSttimeEqualTo(Date value) {
            addCriterionForJDBCDate("sttime =", value, "sttime");
            return (Criteria) this;
        }

        public Criteria andSttimeNotEqualTo(Date value) {
            addCriterionForJDBCDate("sttime <>", value, "sttime");
            return (Criteria) this;
        }

        public Criteria andSttimeGreaterThan(Date value) {
            addCriterionForJDBCDate("sttime >", value, "sttime");
            return (Criteria) this;
        }

        public Criteria andSttimeGreaterThanOrEqualTo(Date value) {
            addCriterionForJDBCDate("sttime >=", value, "sttime");
            return (Criteria) this;
        }

        public Criteria andSttimeLessThan(Date value) {
            addCriterionForJDBCDate("sttime <", value, "sttime");
            return (Criteria) this;
        }

        public Criteria andSttimeLessThanOrEqualTo(Date value) {
            addCriterionForJDBCDate("sttime <=", value, "sttime");
            return (Criteria) this;
        }

        public Criteria andSttimeIn(List<Date> values) {
            addCriterionForJDBCDate("sttime in", values, "sttime");
            return (Criteria) this;
        }

        public Criteria andSttimeNotIn(List<Date> values) {
            addCriterionForJDBCDate("sttime not in", values, "sttime");
            return (Criteria) this;
        }

        public Criteria andSttimeBetween(Date value1, Date value2) {
            addCriterionForJDBCDate("sttime between", value1, value2, "sttime");
            return (Criteria) this;
        }

        public Criteria andSttimeNotBetween(Date value1, Date value2) {
            addCriterionForJDBCDate("sttime not between", value1, value2, "sttime");
            return (Criteria) this;
        }

        public Criteria andEntimeIsNull() {
            addCriterion("entime is null");
            return (Criteria) this;
        }

        public Criteria andEntimeIsNotNull() {
            addCriterion("entime is not null");
            return (Criteria) this;
        }

        public Criteria andEntimeEqualTo(Date value) {
            addCriterionForJDBCDate("entime =", value, "entime");
            return (Criteria) this;
        }

        public Criteria andEntimeNotEqualTo(Date value) {
            addCriterionForJDBCDate("entime <>", value, "entime");
            return (Criteria) this;
        }

        public Criteria andEntimeGreaterThan(Date value) {
            addCriterionForJDBCDate("entime >", value, "entime");
            return (Criteria) this;
        }

        public Criteria andEntimeGreaterThanOrEqualTo(Date value) {
            addCriterionForJDBCDate("entime >=", value, "entime");
            return (Criteria) this;
        }

        public Criteria andEntimeLessThan(Date value) {
            addCriterionForJDBCDate("entime <", value, "entime");
            return (Criteria) this;
        }

        public Criteria andEntimeLessThanOrEqualTo(Date value) {
            addCriterionForJDBCDate("entime <=", value, "entime");
            return (Criteria) this;
        }

        public Criteria andEntimeIn(List<Date> values) {
            addCriterionForJDBCDate("entime in", values, "entime");
            return (Criteria) this;
        }

        public Criteria andEntimeNotIn(List<Date> values) {
            addCriterionForJDBCDate("entime not in", values, "entime");
            return (Criteria) this;
        }

        public Criteria andEntimeBetween(Date value1, Date value2) {
            addCriterionForJDBCDate("entime between", value1, value2, "entime");
            return (Criteria) this;
        }

        public Criteria andEntimeNotBetween(Date value1, Date value2) {
            addCriterionForJDBCDate("entime not between", value1, value2, "entime");
            return (Criteria) this;
        }

        public Criteria andWorkingCountIsNull() {
            addCriterion("working_count is null");
            return (Criteria) this;
        }

        public Criteria andWorkingCountIsNotNull() {
            addCriterion("working_count is not null");
            return (Criteria) this;
        }

        public Criteria andWorkingCountEqualTo(Integer value) {
            addCriterion("working_count =", value, "workingCount");
            return (Criteria) this;
        }

        public Criteria andWorkingCountNotEqualTo(Integer value) {
            addCriterion("working_count <>", value, "workingCount");
            return (Criteria) this;
        }

        public Criteria andWorkingCountGreaterThan(Integer value) {
            addCriterion("working_count >", value, "workingCount");
            return (Criteria) this;
        }

        public Criteria andWorkingCountGreaterThanOrEqualTo(Integer value) {
            addCriterion("working_count >=", value, "workingCount");
            return (Criteria) this;
        }

        public Criteria andWorkingCountLessThan(Integer value) {
            addCriterion("working_count <", value, "workingCount");
            return (Criteria) this;
        }

        public Criteria andWorkingCountLessThanOrEqualTo(Integer value) {
            addCriterion("working_count <=", value, "workingCount");
            return (Criteria) this;
        }

        public Criteria andWorkingCountIn(List<Integer> values) {
            addCriterion("working_count in", values, "workingCount");
            return (Criteria) this;
        }

        public Criteria andWorkingCountNotIn(List<Integer> values) {
            addCriterion("working_count not in", values, "workingCount");
            return (Criteria) this;
        }

        public Criteria andWorkingCountBetween(Integer value1, Integer value2) {
            addCriterion("working_count between", value1, value2, "workingCount");
            return (Criteria) this;
        }

        public Criteria andWorkingCountNotBetween(Integer value1, Integer value2) {
            addCriterion("working_count not between", value1, value2, "workingCount");
            return (Criteria) this;
        }

        public Criteria andQuaCountIsNull() {
            addCriterion("qua_count is null");
            return (Criteria) this;
        }

        public Criteria andQuaCountIsNotNull() {
            addCriterion("qua_count is not null");
            return (Criteria) this;
        }

        public Criteria andQuaCountEqualTo(Integer value) {
            addCriterion("qua_count =", value, "quaCount");
            return (Criteria) this;
        }

        public Criteria andQuaCountNotEqualTo(Integer value) {
            addCriterion("qua_count <>", value, "quaCount");
            return (Criteria) this;
        }

        public Criteria andQuaCountGreaterThan(Integer value) {
            addCriterion("qua_count >", value, "quaCount");
            return (Criteria) this;
        }

        public Criteria andQuaCountGreaterThanOrEqualTo(Integer value) {
            addCriterion("qua_count >=", value, "quaCount");
            return (Criteria) this;
        }

        public Criteria andQuaCountLessThan(Integer value) {
            addCriterion("qua_count <", value, "quaCount");
            return (Criteria) this;
        }

        public Criteria andQuaCountLessThanOrEqualTo(Integer value) {
            addCriterion("qua_count <=", value, "quaCount");
            return (Criteria) this;
        }

        public Criteria andQuaCountIn(List<Integer> values) {
            addCriterion("qua_count in", values, "quaCount");
            return (Criteria) this;
        }

        public Criteria andQuaCountNotIn(List<Integer> values) {
            addCriterion("qua_count not in", values, "quaCount");
            return (Criteria) this;
        }

        public Criteria andQuaCountBetween(Integer value1, Integer value2) {
            addCriterion("qua_count between", value1, value2, "quaCount");
            return (Criteria) this;
        }

        public Criteria andQuaCountNotBetween(Integer value1, Integer value2) {
            addCriterion("qua_count not between", value1, value2, "quaCount");
            return (Criteria) this;
        }

        public Criteria andUnquaCountIsNull() {
            addCriterion("unqua_count is null");
            return (Criteria) this;
        }

        public Criteria andUnquaCountIsNotNull() {
            addCriterion("unqua_count is not null");
            return (Criteria) this;
        }

        public Criteria andUnquaCountEqualTo(Integer value) {
            addCriterion("unqua_count =", value, "unquaCount");
            return (Criteria) this;
        }

        public Criteria andUnquaCountNotEqualTo(Integer value) {
            addCriterion("unqua_count <>", value, "unquaCount");
            return (Criteria) this;
        }

        public Criteria andUnquaCountGreaterThan(Integer value) {
            addCriterion("unqua_count >", value, "unquaCount");
            return (Criteria) this;
        }

        public Criteria andUnquaCountGreaterThanOrEqualTo(Integer value) {
            addCriterion("unqua_count >=", value, "unquaCount");
            return (Criteria) this;
        }

        public Criteria andUnquaCountLessThan(Integer value) {
            addCriterion("unqua_count <", value, "unquaCount");
            return (Criteria) this;
        }

        public Criteria andUnquaCountLessThanOrEqualTo(Integer value) {
            addCriterion("unqua_count <=", value, "unquaCount");
            return (Criteria) this;
        }

        public Criteria andUnquaCountIn(List<Integer> values) {
            addCriterion("unqua_count in", values, "unquaCount");
            return (Criteria) this;
        }

        public Criteria andUnquaCountNotIn(List<Integer> values) {
            addCriterion("unqua_count not in", values, "unquaCount");
            return (Criteria) this;
        }

        public Criteria andUnquaCountBetween(Integer value1, Integer value2) {
            addCriterion("unqua_count between", value1, value2, "unquaCount");
            return (Criteria) this;
        }

        public Criteria andUnquaCountNotBetween(Integer value1, Integer value2) {
            addCriterion("unqua_count not between", value1, value2, "unquaCount");
            return (Criteria) this;
        }

        public Criteria andComTrackIsNull() {
            addCriterion("com_track is null");
            return (Criteria) this;
        }

        public Criteria andComTrackIsNotNull() {
            addCriterion("com_track is not null");
            return (Criteria) this;
        }

        public Criteria andComTrackEqualTo(Integer value) {
            addCriterion("com_track =", value, "comTrack");
            return (Criteria) this;
        }

        public Criteria andComTrackNotEqualTo(Integer value) {
            addCriterion("com_track <>", value, "comTrack");
            return (Criteria) this;
        }

        public Criteria andComTrackGreaterThan(Integer value) {
            addCriterion("com_track >", value, "comTrack");
            return (Criteria) this;
        }

        public Criteria andComTrackGreaterThanOrEqualTo(Integer value) {
            addCriterion("com_track >=", value, "comTrack");
            return (Criteria) this;
        }

        public Criteria andComTrackLessThan(Integer value) {
            addCriterion("com_track <", value, "comTrack");
            return (Criteria) this;
        }

        public Criteria andComTrackLessThanOrEqualTo(Integer value) {
            addCriterion("com_track <=", value, "comTrack");
            return (Criteria) this;
        }

        public Criteria andComTrackIn(List<Integer> values) {
            addCriterion("com_track in", values, "comTrack");
            return (Criteria) this;
        }

        public Criteria andComTrackNotIn(List<Integer> values) {
            addCriterion("com_track not in", values, "comTrack");
            return (Criteria) this;
        }

        public Criteria andComTrackBetween(Integer value1, Integer value2) {
            addCriterion("com_track between", value1, value2, "comTrack");
            return (Criteria) this;
        }

        public Criteria andComTrackNotBetween(Integer value1, Integer value2) {
            addCriterion("com_track not between", value1, value2, "comTrack");
            return (Criteria) this;
        }

        public Criteria andMarkIsNull() {
            addCriterion("mark is null");
            return (Criteria) this;
        }

        public Criteria andMarkIsNotNull() {
            addCriterion("mark is not null");
            return (Criteria) this;
        }

        public Criteria andMarkEqualTo(String value) {
            addCriterion("mark =", value, "mark");
            return (Criteria) this;
        }

        public Criteria andMarkNotEqualTo(String value) {
            addCriterion("mark <>", value, "mark");
            return (Criteria) this;
        }

        public Criteria andMarkGreaterThan(String value) {
            addCriterion("mark >", value, "mark");
            return (Criteria) this;
        }

        public Criteria andMarkGreaterThanOrEqualTo(String value) {
            addCriterion("mark >=", value, "mark");
            return (Criteria) this;
        }

        public Criteria andMarkLessThan(String value) {
            addCriterion("mark <", value, "mark");
            return (Criteria) this;
        }

        public Criteria andMarkLessThanOrEqualTo(String value) {
            addCriterion("mark <=", value, "mark");
            return (Criteria) this;
        }

        public Criteria andMarkLike(String value) {
            addCriterion("mark like", value, "mark");
            return (Criteria) this;
        }

        public Criteria andMarkNotLike(String value) {
            addCriterion("mark not like", value, "mark");
            return (Criteria) this;
        }

        public Criteria andMarkIn(List<String> values) {
            addCriterion("mark in", values, "mark");
            return (Criteria) this;
        }

        public Criteria andMarkNotIn(List<String> values) {
            addCriterion("mark not in", values, "mark");
            return (Criteria) this;
        }

        public Criteria andMarkBetween(String value1, String value2) {
            addCriterion("mark between", value1, value2, "mark");
            return (Criteria) this;
        }

        public Criteria andMarkNotBetween(String value1, String value2) {
            addCriterion("mark not between", value1, value2, "mark");
            return (Criteria) this;
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table day_work
     *
     * @mbg.generated do_not_delete_during_merge Sun Jul 26 23:40:19 CST 2020
     */
    public static class Criteria extends GeneratedCriteria {

        protected Criteria() {
            super();
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table day_work
     *
     * @mbg.generated Sun Jul 26 23:40:19 CST 2020
     */
    public static class Criterion {
        private String condition;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        private String typeHandler;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }
    }
}